#!/bin/bash

dk="docker"

dkc="docker-compose"
dkcU="$dkc up -d --remove-orphans"
dkcd="$dkc down --remove-orphans"
dkce="$dkc exec web"

_isContainerRunning() {
  $dk inspect -f '{{.State.Running}}' "$($dkc ps -q "$1" 2>/dev/null)" 2>/dev/null
}

_isWebContainerInConfig() {
  $dkc config --hash=web 2>/dev/null
}

_envVar() {
  if [[ -z $(_isContainerRunning "$1") ]]; then
    echo "üõè Container $1 is not running. Please run 'ppl up'." >&2
    exit 1
  fi

  var="$($dkc exec "$1" sh -c "echo \$$2" | tr -d '\r')"
  var="${var// }"

  if [[ -n $var ]]; then
    echo "$var"
    exit 0
  fi


  if [[ $# -gt 2 ]]; then
    echo "$3"
    exit 0
  fi


  echo "‚ùå  No \$$2 environment variable found in $1." >&2
  exit 1
}

_createProxy() {
  $dk rm -f nginx-proxy > /dev/null 2>&1
  $dk network create proxy 2>/dev/null
  $dk run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro --name=nginx-proxy --restart=always --network=proxy jwilder/nginx-proxy > /dev/null
  echo 'üîÄ  The Nginx proxy was not launched. I did it for you, and it will stay up until you stop it manually.'
}


_createProxyIfNotRunning() {
  isProxyRunning="$($dk inspect -f '{{.State.Running}}' nginx-proxy 2>&1)"

  if [[ $isProxyRunning != 'true' ]]; then
    _createProxy
  fi
}

up() {
  if [[ -n $(_isWebContainerInConfig) ]]; then
    _createProxyIfNotRunning
  fi

  $dkcU "$@"
}

down() {
  $dkcd "$@"
}

artisan() {
  $dkce php artisan "$@"
}

console() {
  $dkce php ./bin/console "$@"
}

composer() {
  $dkce composer "$@"
}

yarn() {
  $dkce yarn "$@"
}

open() {
  if [[ -z $(_isWebContainerInConfig) ]]; then
    echo "‚ùå  Open works only if standard 'web' container is present."
    exit 1
  fi

  rootUrl=$(_envVar web PPL_OPEN) || exit 1
  url="$rootUrl$1"
  echo "üì∫ Opening $url in your browser..."
  python -m webbrowser "$url"
}

dbInfos() {
  if [[ -z $(_isContainerRunning db) ]]; then
    echo "üõå Container db is not running. Please run 'ppl up'." >&2
    exit 1
  fi

  image="$($dk inspect -f '{{.Config.Image}}' "$($dkc ps -q db)")"

  case $image in
  postgres*)
    connection='pgsql'
    dbPort=5432
    database=$(_envVar db POSTGRES_DB postgres)
    username=$(_envVar db POSTGRES_USER postgres)
    password=$(_envVar db POSTGRES_PASSWORD '')
    port=$($dkc port db $dbPort | cut -d ':' -f 2)
    hostname='postgresql'
    ;;
  mysql*)
    connection='mysql'
    dbPort=3306
    database=$(_envVar db MYSQL_DATABASE)
    username=$(_envVar db MYSQL_USER root)
    password=$(_envVar db MYSQL_PASSWORD '')
    port=$($dkc port db $dbPort | cut -d ':' -f 2)
    hostname='mysql'
    ;;
  *)
    echo "üòû Only postgres and mysql databases are handled for now. PRs welcomed!" >&2
    exit 1
    ;;
  esac

  cat <<EOF
üê≥ From the containers (.env or equivalent):
    DB_CONNECTION=$connection
    DB_HOST=db
    DB_PORT=$dbPort
    DB_USERNAME=$username
    DB_PASSWORD=$password
    DB_DATABASE=$database
    DATABASE_URL=$hostname://$username:$password@db:$dbPort/$database

üíª From your local computer:
    DB_CONNECTION=$connection
    DB_HOST=127.0.0.1
    DB_PORT=$port
    DB_USERNAME=$username
    DB_PASSWORD=$password
    DB_DATABASE=$database
    DATABASE_URL=$hostname://$username:$password@127.0.0.1:$port/$database

EOF
}

inspect() {
  $dk inspect "$($dkc ps -q "$@")"
}

_getPath() {
  SOURCE="${BASH_SOURCE[0]}"
  while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done

   cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd
}

_getSrcPath() {
  echo "$(_getPath)/../src"
}

_writeDockerComposeFile() {
  sed -e "s/\${PROJECT_NAME}/$1/g" < "$(_getSrcPath)"/docker-compose.yml.tpl > "${PWD}"/docker-compose.yml
  echo "üì¶  New docker-compose.yml written for $1 project."
}

_copyDockerFolder() {
  cp -r "$(_getSrcPath)"/docker "${PWD}"
  echo "üê≥  Docker folder copied!"
}

init() {
  if [[ $# -gt 0 ]]; then
      projectName=$1
  else
      projectName=${PWD##*/}
  fi

  _writeDockerComposeFile "$projectName"
  _copyDockerFolder

  echo "üéâ  You're ready to go. Launch '$0 up' to start the project."
}

usage() {
  cat <<EOF
üöÄ PHP Project Launcher.

Usage:
  $0 [COMMAND] [ARGS...]
  $0 -h | --help

Commands:
  init               Install the docker files to set the services. Can be used with project name in parameter.
  up | u             Run the project services (run the proxy if not already launched).
  down | d           Stop and remove the project services.
  reload | rl        Down and up the project services (with image rebuild).
  open | o           Open project in web browser.
  database | db      Show the env variables and the database connection information.
  artisan | a        Execute Laravel Artisan in the web service (with access to DB).
  console | sf       Execute Symfony Console in the web service (with access to DB).
  composer | c       Execute Composer in the web service (with proper version of php).
  yarn | y           Execute Yarn in the web service.
  bash | sh          Open a bash console in the web service.
  exec | e           Execute a command in the web service.
  inspect | i        Show the docker configuration for a service.
  logs               View output from services.
  ps                 List services.
  *                  Fallback on docker-compose binary.
EOF
  exit 1
}



if [[ $# -gt 0 ]]; then
  firstArg=$1
  shift 1

  case ${firstArg} in
    up | u)
      up "$@"
      ;;

    down | d)
      down "$@"
      ;;

    reload | rl)
      down
      up --build "$@"
      ;;

    artisan | a)
      artisan "$@"
      ;;

    console | sf)
      console "$@"
      ;;

    composer | c)
      composer "$@"
      ;;

    yarn | y)
      yarn "$@"
      ;;

    bash | sh)
      $dkce bash "$@"
      ;;

    exec | e)
      $dkce "$@"
      ;;

    open | o)
      open "$@"
      ;;

    database | db)
      dbInfos
      ;;

    inspect | i)
      inspect "$@"
      ;;

    init)
      init "$@"
      ;;

    --help | -h)
      usage
      ;;
    *)
      echo "üê≥ Fallback to \"docker-compose $firstArg $*\": "
      $dkc "${firstArg}" "$@"
      ;;
  esac
else
  usage
fi
