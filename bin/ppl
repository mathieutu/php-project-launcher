#!/bin/bash

dk="docker"

dkc="docker-compose"
dkcU="$dkc up -d --remove-orphans"
dkcd="$dkc down"
dkce="$dkc exec web"

createProxy() {
    $dk rm -f nginx-proxy > /dev/null 2>&1
    $dk network create proxy 2>/dev/null
    $dk run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro --name=nginx-proxy --restart=always --network=proxy jwilder/nginx-proxy > /dev/null
    echo 'üîÄ  The Nginx proxy was not launched. I did it for you, and it will stay up until you stop it manually.'
}


createProxyIfNotRunning() {
    isProxyRunning="$($dk inspect -f '{{.State.Running}}' nginx-proxy 2>&1)"
    if [[ ${isProxyRunning} != 'true' ]]; then
        createProxy
    fi
}

up() {
    createProxyIfNotRunning
    $dkcU "$@"
}

_envVar() {
    var="$($dkc exec "$1" sh -c "echo \$$2" | tr -d '\r')"
    var="${var// }"
    if [[ -n $var ]]; then
        echo "$var"
    else
        if [[ $# -gt 2 ]]; then
            echo "$3"
        else
            echo "No \$$2 environment variable found in $1." >&2
            exit 1
        fi
    fi
}

open() {
    rootUrl=$(_envVar web PPL_OPEN) || exit 1
    url="$rootUrl$1"
    echo "üì∫ Opening $url in your browser..."
    python -m webbrowser "$url"
}

down() {
    $dkcd "$@"
}

artisan() {
    $dkce php artisan "$@"
}

console() {
    $dkce php ./bin/console "$@"
}

composer() {
    $dkce composer "$@"
}

yarn() {
    $dkce yarn "$@"
}

getPath() {
    SOURCE="${BASH_SOURCE[0]}"
    while [[ -h "$SOURCE" ]]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done

     cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd
}

getSrcPath() {
    echo "$(getPath)/../src"
}

writeDockerComposeFile() {
    sed -e "s/\${PROJECT_NAME}/$1/g" < "$(getSrcPath)"/docker-compose.yml.tpl > "${PWD}"/docker-compose.yml
    echo "üì¶  New docker-compose.yml written for $1 project."
}

copyDockerFolder() {
    cp -r "$(getSrcPath)"/docker "${PWD}"
    echo "üê≥  Docker folder copied!"
}

init() {
    if [[ $# -gt 0 ]]; then
        projectName=$1
    else
        projectName=${PWD##*/}
    fi

    writeDockerComposeFile "$projectName"
    copyDockerFolder

    echo "üéâ  You're ready to go. Launch '$0 up' to start the project."
}

dbInfos() {
    image="$($dk inspect -f '{{.Config.Image}}' "$($dkc ps -q db)")"

    case $image in
    postgres*)
        database=$(_envVar db POSTGRES_DB postgres)
        username=$(_envVar db POSTGRES_USER postgres)
        password=$(_envVar db POSTGRES_PASSWORD '')
        port=$($dkc port db 5432 | cut -d ':' -f 2)
        cat <<EOF
From the container:
    DB_CONNECTION=pgsql
    DB_HOST=db
    DB_PORT=5432
    DB_USERNAME=$username
    DB_PASSWORD=$password
    DB_DATABASE=$database
    DATABASE_URL=postgresql://$username:$password@db:5432/$database

From outside:
    Type: PostgresSQL
    Host: 127.0.0.1
    Port: $port
    Username: $username
    Password: $password
    Database: $database
    Url: postgresql://$username:$password@127.0.0.1:$port/$database
EOF
       ;;

   mysql*)
        database=$(_envVar db MYSQL_DATABASE)
        username=$(_envVar db MYSQL_USER root)
        password=$(_envVar db MYSQL_PASSWORD '')
        port=$($dkc port db 3306 | cut -d ':' -f 2)

        cat <<EOF
From the container:
    DB_CONNECTION=mysql
    DB_HOST=db
    DB_PORT=3306
    DB_USERNAME=$username
    DB_PASSWORD=$password
    DB_DATABASE=$database
    DATABASE_URL=mysql://$username:$password@db:3306/$database

From outside:
    Type: MySQL
    Host: 127.0.0.1
    Port: $port
    Username: $username
    Password: $password
    Database: $database
    Url: mysql://$username:$password@127.0.0.1:$port/$database
EOF
       ;;
   *)
        echo "üòû Only postgres and mysql databases are handled for now. PRs welcomed!" >&2
        exit 1
        ;;
    esac
}

inspect() {
    $dk inspect "$($dkc ps -q "$@")"
}
usage() {
    cat <<EOF
PHP Project Launcher.

Usage:
  $0 [COMMAND] [ARGS...]
  $0 -h | --help

Commands:
  init               Install the docker files to set the services. Can be used with project name in parameter.
  up | u             Run the project services (run the proxy if not already launched).
  down | d           Stop and remove the project services.
  reload | rl        Down and up the project services (with image rebuild).
  open | o           Open project in web browser.
  database | db      Show the env variables and the database connection information.
  artisan | a        Execute Laravel Artisan in the web service (with access to DB).
  console | sf       Execute Symfony Console in the web service (with access to DB).
  composer | c       Execute Composer in the web service (with proper version of php).
  yarn | y           Execute Yarn in the web service.
  bash | sh          Open a bash console in the web service.
  exec | e           Execute a command in the web service.
  inspect | i        Show the docker configuration for a service.
  logs               View output from services.
  ps                 List services.
  *                  Fallback on docker-compose binary.
EOF
exit 1
}



if [[ $# -gt 0 ]]; then
    firstArg=$1
    shift 1

    case ${firstArg} in
        up | u)
            up "$@"
            ;;

        down | d)
            down "$@"
            ;;

        reload | rl)
            down
            up --build "$@"
            ;;

        artisan | a)
            artisan "$@"
            ;;

        console | sf)
            console "$@"
            ;;

        composer | c)
            composer "$@"
            ;;

        yarn | y)
            yarn "$@"
            ;;

        bash | sh)
            $dkce bash "$@"
            ;;

        exec | e)
            $dkce "$@"
            ;;

        init)
            init "$1"
            ;;

        open | o)
            open "$1"
            ;;

        database | db)
           dbInfos
            ;;

        inspect | i)
            inspect "$@"
            ;;

        --help | -h)
            usage
            ;;
        *)
            echo "üê≥ Fallback to \"docker-compose $firstArg $*\": "
            $dkc "${firstArg}" "$@"
            ;;
    esac
else
    usage
fi
